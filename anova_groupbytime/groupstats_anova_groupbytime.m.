%% -------------------------------------------------------------------------
function groupstats_anova_flex(Config_File)

%% config
addpath(genpath('/oak/stanford/groups/menon/projects/daelsaid/2019_mathfun/scripts/taskfmri/batchtemplates/')); 
addpath(genpath('/oak/stanford/groups/menon/projects/daelsaid/2019_mathfun/scripts/config_scripts/')); 
addpath('/oak/stanford/groups/menon/projects/shelbyka/2017_TD_MD_mathfun/results/taskfmri/participants');
addpath(genpath('/oak/stanford/groups/menon/projects/daelsaid/2019_mathfun/scripts/taskfmri/groupstats/anova_group_by_time'));

% Show the system information and write log files
warning('off', 'MATLAB:FINITE:obsoleteFunction')
% c = fix(clock);
disp('==================================================================');
% fprintf('fMRI GroupAnalysis start at %d/%02d/%02d %02d:%02d:%02d\n',c);
disp('==================================================================');
disp(['Current directory is: ',pwd]);
disp('------------------------------------------------------------------');
currentdir = pwd;

% -------------------------------------------------------------------------
% Check group analysis configuration and load it if it exists
% -------------------------------------------------------------------------

Config_File = strtrim(Config_File);
if(exist(Config_File,'file')==0)
     fprintf('Cannot find the configuration file ... \n');
end
[ConfigFilePath, Config_File, ConfigFileExt] = fileparts(Config_File);

eval(Config_File);
clear Config_File;

% container
spm_version             = strtrim(paralist.spmversion);
software_path           = '/oak/stanford/groups/menon/toolboxes/';

spm_path                = fullfile(software_path, spm_version);
% spmgpstatsscript_path   = ['/oak/stanford/groups/menon/scsnlscripts/brainImaging/mri/fmri/glmActivation/groupStats/' spm_version];
spmgpstatsscript_path   = '/oak/stanford/groups/menon/projects/daelsaid/2019_mathfun/scripts/taskfmri/groupstats/';
template_path=['/oak/stanford/groups/menon/projects/daelsaid/2019_mathfun/scripts/taskfmri/groupstats/batchtemplates/'];

sprintf('adding SPM path: %s\n', spm_path);
addpath(genpath(spm_path));
sprintf('adding SPM based group stats scripts path: %s\n', spmgpstatsscript_path);
addpath(genpath(spmgpstatsscript_path));

%% Parameters
% -------------------------------------------------------------------------
% Read in parameters
% -------------------------------------------------------------------------

subjlist_file    = strtrim(paralist.subjlist_file);
project_dir      = strtrim(paralist.projectdir);
stats_folder     = strtrim(paralist.stats_folder);
output_folder    = strtrim(paralist.output_folder);
reg_file         = strtrim(paralist.reg_file);
analysis_type    = strtrim(paralist.analysis_type);
fmri_type        = strtrim(paralist.fmri_type);
template_path    = strtrim(paralist.template_path);
spm_version      = strtrim(paralist.spmversion);
type_of_test     = strtrim(paralist.ttest_type_of_test);

switch analysis_type
    case 'rsa'
        rsa=1
        glm=0
        load_contrasts=0
        basename_rsa=['rsa_zscore.nii,1']
        contrastNames    = strtrim(paralist.contrastNames);
    case 'glm'
        load_contrasts=1
        glm=1
        rsa=0
    otherwise
        error('')
end

disp('-------------- Contents of the Parameter List --------------------');
disp(paralist);
disp('------------------------------------------------------------------');
clear paralist;

% -------------------------------------------------------------------------
% Check covariate of interest
% -------------------------------------------------------------------------
if ~isempty(reg_file)
    if(numgroup == 2)
        fprintf('Covariate is not supported for two group stats\n');
        return;
    end
    numreg = length(reg_file);
    for i = 1:numreg
        if ~exist(reg_file{i}, 'file')
            fprintf('Covariates file does not exist: %s\n', reg_file{i});
            return;
        end
    end
    if(numgroup == 1)
        reg_names = cell(numreg,1);
        for i = 1:numreg
            [a b c d e] = regexpi(reg_file{i}, '(\w+)\.\w+$');
            reg_names{i} = e{1}{1};
            reg_file{i} = fullfile(currentdir,reg_file{i});
        end
        reg_vec = 1;
    end
else
    reg_vec = [];
end

% Initialize the batch system
spm_jobman('initcfg');
delete(get(0,'Children'));

%% Load subject list, constrast file and batchfile
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

batchfile='anova_flex.mat'
subjlist.g1t1 = csvread(subjlist_file{1},1)
subjlist.g1t2 = csvread(subjlist_file{2},1)
subjlist.g2t1 = csvread(subjlist_file{3},1)
subjlist.g2t2 = csvread(subjlist_file{4},1)

subjlist.g1 =   [subjlist.g1t1;subjlist.g1t2]
subjlist.g2 =   [subjlist.g2t1;subjlist.g2t2]

n1=size(subjlist.g1t1,1)
n2=size(subjlist.g2t1,1)

num={}
anova_matlabbatch   = {}
anova_matlabbatch.dir   = {}
groups  = {};
contrasts={}

num.levels_condition    = 3;
num.groups              = 2
num.repeated_measures   = 1;
num.subj_total          = (n1*2) + (n2*2);
num.factors             = 3;
num.effects             = 2; %initialize

main_effect_condition   = [1:num.levels_condition] - mean(1:num.levels_condition);  %main effect of condition
main_effect_group       = [ 1 -1 0 ]
design_matrix_len       = num.subj_total*num.repeated_measures

anova_matlabbatch.scans = cell(design_matrix_len,1);
anova_matlabbatch.factmatrix = ones(design_matrix_len,num.factors+1);

anova_matlabbatch.fac(1).name='subjects'
anova_matlabbatch.fac(2).name='group'
anova_matlabbatch.fac(3).name='time'

anova_matlabbatch.fac(1).dept = 0;
anova_matlabbatch.fac(1).variance = 0;
anova_matlabbatch.fac(1).gmsca = 0;
anova_matlabbatch.fac(1).ancova = 0;

anova_matlabbatch.fac(2).dept = 0;
anova_matlabbatch.fac(2).variance = 0;
anova_matlabbatch.fac(2).gmsca = 0;
anova_matlabbatch.fac(2).ancova = 0;

anova_matlabbatch.fac(3).dept = 0;
anova_matlabbatch.fac(3).variance = 0;
anova_matlabbatch.fac(3).gmsca = 0;
anova_matlabbatch.fac(3).ancova = 0;

for subcnt1 = 1:length(subjlist.g1)
    subject = subjlist.g1(subcnt1);
    subject = char(pad(string(subject),4,'left','0'));
    fprintf('subjects1(subcnt1): %s \n',subject);
    visit   = num2str(subjlist.g1(subcnt1,2));
    session = num2str(subjlist.g1(subcnt1,3));
    sub_statsg1{subcnt1,1} = fullfile(project_dir, 'results', fmri_type, 'participants', ...
        subject, ['visit',visit],['session',session], analysis_type, ...
        ['stats_', spm_version], stats_folder);
end

for subcnt2 = 1:length(subjlist.g2)
    subject = subjlist.g2(subcnt2);
    subject = char(pad(string(subject),4,'left','0'));
    fprintf('subjects2(subcnt2): %s \n',subject);
    visit   = num2str(subjlist.g2(subcnt2,2));
    session = num2str(subjlist.g2(subcnt2,3));
    sub_statsg2{subcnt2,1} = fullfile(project_dir, 'results', fmri_type, 'participants', ...
        subject, ['visit',visit],['session',session], analysis_type, ...
        ['stats_', spm_version], stats_folder);
end

all_sub_scan_dirs=[sub_statsg1;sub_statsg2]

if load_contrasts
    contrastfile = fullfile(sub_statsg1{1}, 'contrasts.mat');
    load(contrastfile);
end

output_path = fullfile(project_dir, 'results', fmri_type, 'groupstats', ...
    analysis_type, [output_folder,'_', spm_version]);

if exist(output_path)
    cd(output_path);
else
    mkdir(output_path);
    cd (output_path);
end

load(fullfile(template_path,batchfile));

if ~isempty(reg_vec)
    for j = 1:numreg
        regs = load(reg_file{j});
        matlabbatch{1}.spm.stats.factorial_design.cov(j).cname = reg_names{j};
        matlabbatch{1}.spm.stats.factorial_design.cov(j).c     = regs(:,1);
        matlabbatch{1}.spm.stats.factorial_design.cov(j).iCFT  = 1;
        matlabbatch{1}.spm.stats.factorial_design.cov(j).iCC   = 1;
        clear regs;
    end
end

numTContrasts = length(contrastNames);

for i = 1:2:numTContrasts
    conNum = sprintf('%03d', i);
    conName = contrastNames{i};

    if glm
        confile_basename = ['con_0' conNum '.nii,1']
    end

    if numTContrasts == 1
        invName = ['-', contrastNames{i}];
    else
        invName = contrastNames{i+1};
    end
    dirName = fullfile(pwd, [conNum 'T_' conName]);

    if ~exist(dirName)
        mkdir(dirName);
        cd(dirName);
    else
        cd(dirName);
    end

    if exist('SPM.mat', 'file')
        disp('The stats directory contains SPM.mat. It will be deleted.');
        disp('-----------------------------------------------------------')
        % unix('/bin/rm -rf *');
        delete *.mat;
    end

    for j=1:length(sub_statsg1)
        if glm
            file=fullfile(sub_statsg1{j},confile_basename);
        elseif rsa
            file = fullfile(sub_statsg1{j}, basename_rsa);
        end
        anova_matlabbatch.scans{j,1}=file;
    end

    for j=1:length(sub_statsg2)
       if glm
            file=fullfile(sub_statsg2{j},confile_basename);
        elseif rsa
            file = fullfile(sub_statsg2{j}, basename_rsa);
        end
        anova_matlabbatch.scans{length(sub_statsg1)+j,1}=file
    end

    for j=1:n1
        anova_matlabbatch.factmatrix(j,2)=j
        anova_matlabbatch.factmatrix(n1+j,2)=j
        for g=1:num.groups
            anova_matlabbatch.factmatrix(n1+j,3)=g
        end
    end

    for j=1:n2
        anova_matlabbatch.factmatrix(length(sub_statsg1)+j,2)=j
        anova_matlabbatch.factmatrix(length(sub_statsg1)+j,4)=2
        anova_matlabbatch.factmatrix(length(sub_statsg1)+n2+j,2)=j
        anova_matlabbatch.factmatrix(length(sub_statsg1)+n2+j,4)=2
        for group=1:num.groups
            anova_matlabbatch.factmatrix(length(sub_statsg1)+j,3)=group
        end
    end

    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fsuball.specall.scans =  anova_matlabbatch.scans;
    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fsuball.specall.imatrix = anova_matlabbatch.factmatrix;
end

for factor = 1:length(num.factors)
    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fac(factor).name =     anova_matlabbatch.fac(factor).name;
    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fac(factor).dept =     anova_matlabbatch.fac(factor).dept;
    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fac(factor).variance = anova_matlabbatch.fac(factor).variance;
    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fac(factor).gmsca = 0;
    matlabbatch{1}.spm.stats.factorial_design.des.fblock.fac(factor).ancova = 0;
end

matlabbatch{1}.spm.stats.factorial_design.dir={};
matlabbatch{1}.spm.stats.factorial_design.dir{1}=pwd;
matlabbatch{1}.spm.stats.factorial_design.masking.tm.tm_none = 1;
matlabbatch{1}.spm.stats.factorial_design.masking.im = 1;
matlabbatch{1}.spm.stats.factorial_design.masking.em = {''};
matlabbatch{1}.spm.stats.factorial_design.globalc.g_omit = 1;
matlabbatch{1}.spm.stats.factorial_design.globalm.gmsca.gmsca_no = 1;

matlabbatch{2}.spm.stats.fmri_est.spmmat{1}        = fullfile(pwd,'SPM.mat');
matlabbatch{2}.spm.stats.fmri_est.method.Classical = 1;

% Run group stats batch
save(batchfile,'matlabbatch');
spm('Defaults','FMRI')
%spm_jobman('interactive',batchfile);
spm_jobman('run', ['./' batchfile]);

fprintf('Changing back to the directory: %s \n', currentdir);
% c  =  disp('==================================================================');
fprintf('fMRI Group Stats finished at %d/%02d/%02d %02d:%02d:%02d \n',c);
disp('==================================================================');
cd(currentdir);
delete(get(0,'Children'));
clear all;
close all;
end
